name: Create ChatGPT Solutions

on:
  workflow_dispatch:

jobs:
  generate-notebooks:
    runs-on: macos-latest


    steps:
      - name: clone repo
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          pip3.10 install -r requirements.txt
          pip3.10 install openai
          brew install --cask mactex-no-gui
          echo "/Library/TeX/texbin" >> $GITHUB_PATH

      - name: Run ai_solutions.py with Secret Key
        run: |
          python3 "Organize/src/additional_scripts/ai_solutions.py"
        env:
          OPEN_AI_KEY: ${{ secrets.OPEN_AI_KEY }}

      - name: Run Organize.py with White
        run: |
          python3.10 Organize/Organize.py White

      - name: Run add_readme.py
        run: |
            python3 "Organize/src/additional_scripts/add_readme.py"

      - name: Commit and push changes
        env:
          TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
        run: |
          # Konfiguracja danych użytkownika dla Git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Dodaj wszystkie zmodyfikowane pliki
          git add Solutions/.
          if git diff --cached --quiet -- Solutions/; then
              echo "Brak zmian w Solutions"
          else
              git pull # na wypadek gdyby uzytknik cos dodal w miedzy czasie
              git commit -m "Dodaje readme wygenerowane przez chat gpt"
              git push "https://x-access-token:${TOKEN_GITHUB}@github.com/${{ github.repository }}.git" HEAD:${{ github.ref }}
          fi
        shell: bash

      - name: Run Organize.py with all passwords
        env:
          PASSWORD_I: ${{ secrets.PASSWORD_ENCRYPTED_I }}
          PASSWORD_II: ${{ secrets.PASSWORD_ENCRYPTED_II }}
          PASSWORD_III: ${{ secrets.PASSWORD_ENCRYPTED_III }}
          PASSWORD_IV: ${{ secrets.PASSWORD_ENCRYPTED_IV }}
          PASSWORD_V: ${{ secrets.PASSWORD_ENCRYPTED_V }}
          PASSWORD_VI: ${{ secrets.PASSWORD_ENCRYPTED_VI }}
          PASSWORD_VII: ${{ secrets.PASSWORD_ENCRYPTED_VII }}
        run: |
          (
            [ -z "$PASSWORD_I" ] && printf '\n\n\n' || echo "$PASSWORD_I"
            [ -z "$PASSWORD_II" ] && printf '\n\n\n' || echo "$PASSWORD_II"
            [ -z "$PASSWORD_III" ] && printf '\n\n\n' || echo "$PASSWORD_III"
            [ -z "$PASSWORD_IV" ] && printf '\n\n\n' || echo "$PASSWORD_IV"
            [ -z "$PASSWORD_V" ] && printf '\n\n\n' || echo "$PASSWORD_V"
            [ -z "$PASSWORD_VI" ] && printf '\n\n\n' || echo "$PASSWORD_VI"
            [ -z "$PASSWORD_VII" ] && printf '\n\n\n' || echo "$PASSWORD_VII"
          ) | python3.10 Organize/Organize.py INIT

      - name: Upload Notebooks
        uses: actions/upload-artifact@v4
        with:
          name: pdf-assets
          path: Notebooks/**/*.pdf
          retention-days: 1

      - name: Commit and push changes
        env:
          TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
        run: |
          # Konfiguracja danych użytkownika dla Git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Dodaj wszystkie zmodyfikowane pliki
          git add .
          if git diff --cached --quiet -- /.; then
              echo "Brak zmian w Solutions"
          else
              git pull # na wypadek gdyby uzytknik cos dodal w miedzy czasie
              git commit -m "Dodaje readme"
              git push "https://x-access-token:${TOKEN_GITHUB}@github.com/${{ github.repository }}.git" HEAD:${{ github.ref }}
          fi
        shell: bash


  update-release:
    needs: generate-notebooks
    runs-on: ubuntu-latest
    steps:
      - name: Download Notebooks
        uses: actions/download-artifact@v4
        with:
          name: pdf-assets
          path: release-pdfs
      - name: Rename files before release
        run: |
          for file in release-pdfs/*.pdf; do
            new_name=$(echo "$file" | sed -E 's/ (.*)-/-/')
            [ "$file" != "$new_name" ] && mv "$file" "$new_name"
          done


      - name: update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: Notebooks
          update: true
          files: release-pdfs/**/*.pdf
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
